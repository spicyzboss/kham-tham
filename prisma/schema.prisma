generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "../dbml"
  outputName          = "khamtham.dbml"
  projectName         = "Kham Tham"
  projectDatabaseType = "MySQL"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum RoomStatus {
  WAITING
  PLAYING
  ENDED
}

enum GameMode {
  COMPETITIVE
  COOPERATIVE
}

enum QuestionType {
  QUIZ_4_ANSWER
  MULTI_SELECT_ANSWER
  TYPE_ANSWER
}

model User {
  id          String   @id @default(uuid())
  username    String   @unique
  email       String   @unique
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  RoomCreated Room[]

  @@map("users")
}

model Player {
  id               String             @id @default(uuid())
  username         String
  createdAt        DateTime           @default(now())
  PlayerJoinedRoom PlayerJoinedRoom[]

  @@map("players")
}

model Room {
  id               Int                @id @default(autoincrement())
  code             String
  owner            User               @relation(fields: [ownerId], references: [id])
  ownerId          String
  name             String
  mode             GameMode
  status           RoomStatus
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  RoomQuestion     RoomQuestion[]
  PlayerJoinedRoom PlayerJoinedRoom[]

  @@map("rooms")
}

model PlayerJoinedRoom {
  id                   Int                    @id @default(autoincrement())
  player               Player                 @relation(fields: [playerId], references: [id])
  playerId             String
  room                 Room                   @relation(fields: [roomId], references: [id])
  roomId               Int
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  PlayerAnswerQuestion PlayerAnswerQuestion[]

  @@map("player_room")
}

model PlayerAnswerQuestion {
  id                 Int                 @id @default(autoincrement())
  PlayerJoinedRoom   PlayerJoinedRoom    @relation(fields: [playerJoinedRoomId], references: [id])
  playerJoinedRoomId Int
  RoomQuestion       RoomQuestion        @relation(fields: [roomQuestionId], references: [id])
  roomQuestionId     Int
  Question4Answer    Question4Answer[]
  MultiSelectAnswer  MultiSelectAnswer[]
  TypeAnswer         TypeAnswer[]

  @@map("player_room_question")
}

model RoomQuestion {
  id                   Int                    @id @default(autoincrement())
  room                 Room                   @relation(fields: [roomId], references: [id])
  roomId               Int
  type                 QuestionType
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  Question4Question    Question4Question[]
  MultiSelectQuestion  MultiSelectQuestion[]
  TypeQuestion         TypeQuestion[]
  PlayerAnswerQuestion PlayerAnswerQuestion[]

  @@map("room_question")
}

model Question4Question {
  id                  Int          @id @default(autoincrement())
  Question            RoomQuestion @relation(fields: [roomQuestionId], references: [id])
  roomQuestionId      Int
  question            String
  choice1             String
  choice2             String
  choice3             String
  choice4             String
  answer              Int
  timeDisplayQuestion Int
  timeAnswerQuestion  Int
  score               Float

  @@map("question_4_questions")
}

model Question4Answer {
  id                     Int                  @id
  answer                 Int
  PlayerAnswerQuestion   PlayerAnswerQuestion @relation(fields: [playerAnswerQuestionId], references: [id])
  playerAnswerQuestionId Int

  @@map("question_4_answers")
}

model MultiSelectQuestion {
  id                  Int          @id @default(autoincrement())
  Question            RoomQuestion @relation(fields: [roomQuestionId], references: [id])
  roomQuestionId      Int
  question            String
  choice1             String
  choice2             String
  choice3             String
  choice4             String
  answer              Json
  timeDisplayQuestion Int
  timeAnswerQuestion  Int
  score               Float

  @@map("multi_select_questions")
}

model MultiSelectAnswer {
  id                     Int                  @id
  answer                 Json
  PlayerAnswerQuestion   PlayerAnswerQuestion @relation(fields: [playerAnswerQuestionId], references: [id])
  playerAnswerQuestionId Int

  @@map("multi_select_answers")
}

model TypeQuestion {
  id                  Int          @id @default(autoincrement())
  Question            RoomQuestion @relation(fields: [roomQuestionId], references: [id])
  roomQuestionId      Int
  question            String
  answer              String
  timeDisplayQuestion Int
  timeAnswerQuestion  Int
  score               Float

  @@map("type_questions")
}

model TypeAnswer {
  id                     Int                  @id
  answer                 String
  PlayerAnswerQuestion   PlayerAnswerQuestion @relation(fields: [playerAnswerQuestionId], references: [id])
  playerAnswerQuestionId Int

  @@map("type_answers")
}
